import GetDataById from "../http/GetData";
import React, { useState, useContext, useEffect } from "react";
import { Container, Spinner, Tabs, Tab } from "react-bootstrap";
import { Context } from "../index";
import { observer } from "mobx-react-lite";
import { dict_translator } from "../utils/Helpers";

const Character = observer(() => {
  const { user } = useContext(Context);
  const [playerData, setPlayerData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [delay, setDelay] = useState(false);
  const [visibleSection, setVisibleSection] = useState(null);
  const user_id = user.user.id;

  useEffect(() => {
    const fetchPlayer = async () => {
      const playerData = await GetDataById();
      setPlayerData(playerData.data);
      user.setPlayer(playerData.data);
      setLoading(false);
    };

    fetchPlayer(user_id);
  }, [user_id, user]);

  useEffect(() => {
    if (playerData) {
      setTimeout(() => {
        setDelay(true);
      }, 2000); // Delay time of 2 seconds
    }
  }, [playerData]);

  const handleHeaderClick = (category) => {
    if (visibleSection === category) {
      setVisibleSection(null);
    } else {
      setVisibleSection(category);
    }
  };
 
  const arrToCountedDict = (arr) => {
    const countedDict = {}
    for (let i = 0; i < arr.length; i++) {
      if (!countedDict[arr[i]]) {
        countedDict[arr[i]] = 1
      } else {
        countedDict[arr[i]]++
      }
    }
    return countedDict
  }

  const getTranslation = (value) => {
    const translatedValue = dict_translator[value] ? dict_translator[value] : value;
    return translatedValue
  }

  const prepareDataValues = (value) => {
    if (value.constructor === Array) {
      let valueString = ""
      let valueDict = arrToCountedDict(value)
      for (const [key, value] of Object.entries(valueDict)) {
        let _key = getTranslation(key)
        if (valueString !== "") {
          valueString = valueString + ", "
        }
        valueString = valueString + _key 
        if (value > 1) {
          valueString = valueString + "(" + value + ")"
        }
      }
      return valueString
    }

    if (value.constructor === Object) {
      let valueString = "\n"
      for (const [k, v] of Object.entries(value)) {
        if (valueString !== "\n") {
          valueString = valueString + "\n"
        }
        valueString = valueString + getTranslation(k) + ": " + v 
      }
      return valueString
    }

    if (typeof(value) == "number") {
      if (Number.isInteger(value)) {
        return value
      }
      return value.toFixed(1)
    } 
    if (typeof(value) == "string") {
      return getTranslation(value)
    }
    if (typeof(value) == "boolean") {
      return value ? "–î–∞" : "–ù–µ—Ç"
    }
    return value

  }

  const characterDataToShow = (data) => {
    const dataDict = {}
    for (const [data_key, data_values] of Object.entries(data)) {
      let data_value = "\n"
      for (const [key, value] of Object.entries(data_values)) {
        if (key === "name") {
          continue
        }
        if (key in dict_translator) {
          data_value = data_value + dict_translator[key] + ": " + prepareDataValues(value) + '\n'
        }
      }
      data_value = data_value + "\n"
      dataDict[data_key] = data_value
    };

    return dataDict

  }

  const getModByAtt = (att, agi = false) => {
    let current = 10;
    let step = 1;
    if (agi) {
      step = 2
    }
    let mod = 0;

    if (att < 10) {
      while (current - step >= att) {
        current -= step
        step += 1
        mod--
      }
      if (current - att !== 0) {
        mod--
      }
    } else {
        while (current + step <= att) {
          current += step;
          step += 1;
          mod++;
        }
    }

    return mod < 0 ? `${mod}` : `+${mod}`

  }


  const prepareAttString = (att, att_inc, agi = false) => {
    return (
      `${att + att_inc} (${getModByAtt(att + att_inc, agi)}), ${att} + ${att_inc}`
    )
  }


  const getSectionData = (category) => {
    switch (category) {
      case "–ê—Ç—Ä–∏–±—É—Ç—ã":
        return {
          type: "–ê—Ç—Ä–∏–±—É—Ç—ã",
          data: {
            "–í–æ—Å–ø—Ä–∏—è—Ç–∏–µ üëÅ": prepareAttString(playerData.perception, playerData.perception_increase),
            "–°–∏–ª–∞ üèãÔ∏è": prepareAttString(playerData.strength, playerData.strength_increase),
            "–õ–æ–≤–∫–æ—Å—Ç—å ü§∏": prepareAttString(playerData.agility, playerData.agility_increase, true),
            "–¢–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏–µ ü´Ä": prepareAttString(playerData.constitution, playerData.constitution_increase),
            "–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç üéì": prepareAttString(playerData.intelligence, playerData.intelligence_increase),
            "–•–∞—Ä–∏–∑–º–∞ ü§ù": prepareAttString(playerData.charisma, playerData.charisma_increase),
            "–ú—É–¥—Ä–æ—Å—Ç—å üßô": prepareAttString(playerData.wisdom, playerData.wisdom_increase),
            "–£–¥–∞—á–∞ üçÄ": prepareAttString(playerData.luck, playerData.luck_increase),
          },
        };
      case "–ù–∞–≤—ã–∫–∏":
        return {
          type: "–ù–∞–≤—ã–∫–∏",
          data: {
            "–¢–æ—Ä–≥–æ–≤–ª—è üí∞": playerData.barter,
            "–£—Å—Ç—Ä–∞—à–µ–Ω–∏–µ üò§": playerData.intimidation,
            "–í–æ–æ–¥—É—à–µ–≤–ª–µ–Ω–∏–µ üåü": playerData.persuasion,
            "–°–∫—Ä—ã—Ç–Ω–æ—Å—Ç—å üïµÔ∏è": playerData.sneak,
            "–ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å üëÄ": playerData.observation,
            "–û–±–Ω–∞–∂–µ–Ω–∏–µ —Å—É—Ç–∏ üîç": playerData.identification,
            "–ó–Ω–∞–Ω–∏–µ –º–∞–≥–∏–∏ üìñ": playerData.knowledge,
            "–õ–æ–≤—É—à–∫–∏ –∏ –∑–∞–º–∫–∏ üóùÔ∏è": playerData.lockpicking,
            "–ó–Ω–∞–Ω–∏–µ –ø—Ä–∏—Ä–æ–¥—ã üåø": playerData.animal_training,
            "–ê—Ç–ª–µ—Ç–∏–∫–∞ üèÉ": playerData.athletics,
            "–ö–∞–ª–ª–∏–≥—Ä–∞—Ñ–∏—è ‚úçÔ∏è": playerData.calligraphy,
            "–°—Ç–æ–π–∫–æ—Å—Ç—å üß±": playerData.fortitude,
            "–ú–µ–¥–∏—Ü–∏–Ω–∞ ü©∫": playerData.medicine,
            "–ú–µ—á–∏ ‚öîÔ∏è": playerData.swords,
            "–ö–∏–Ω–∂–∞–ª—ã üó°Ô∏è": playerData.knifes,
            "–¢–æ–ø–æ—Ä—ã ü™ì": playerData.axes,
            "–ú–æ–ª–æ—Ç—ã üî®": playerData.hammers,
            "–õ—É–∫–∏ üèπ": playerData.bows,
            "–ü–æ—Å–æ—Ö–∏ ü™Ñ": playerData.staffs,
            "–ö–æ–ø—å—è üî±": playerData.spears,
            "–ê—Ä–±–∞–ª–µ—Ç—ã üéØ": playerData.crossbows,
            "–ú–µ—Ç–∞—Ç–µ–ª—å–Ω–æ–µ –æ—Ä—É–∂–∏–µ üî™": playerData.throwing_weapon,
            "–©–∏—Ç—ã üõ°Ô∏è": playerData.shield,
          },
        };
      case "–ú–∞–≥–∏—è":
        return {
          type: "–ú–∞–≥–∏—è",
          data: characterDataToShow(playerData.prepared_magic),
        }

      case "–¢–∞–ª–∞–Ω—Ç—ã":
        return {
          type: "–¢–∞–ª–∞–Ω—Ç—ã",
          data: arrToCountedDict(playerData.talents),
        }
      case "–£–º–µ–Ω–∏—è":
        return {
          type: "–£–º–µ–Ω–∏—è",
          data: characterDataToShow(playerData.abilities)
        }
      case "–í—Ä–µ–º–µ–Ω–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã":
        return {
          type: "–í—Ä–µ–º–µ–Ω–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã",
          data: characterDataToShow(playerData.temporary_effects)
        }
      default:
        return null;
    }
  };

  if (!delay) {
    return (
      <div className="d-flex justify-content-center align-items-center">
        <Spinner animation="border" role="status">
          <span className="visually-hidden">Loading...</span>
        </Spinner>
      </div>
    );
  }

  if (loading) {
    return <div>Loading...</div>;
  }

  return (
    <div className="content-overlay"> {/* –î–æ–±–∞–≤–ª–µ–Ω –∫–ª–∞—Å—Å content-overlay */}
      <Tabs
        defaultActiveKey="–ü–∞—Ä–∞–º–µ—Ç—Ä—ã"
        transition={false}
        id="playerInfo"
        className="mb-3"
      >
        <Tab eventKey="–ü–∞—Ä–∞–º–µ—Ç—Ä—ã" title="–ü–∞—Ä–∞–º–µ—Ç—Ä—ã">
          <Container>
            <span>–ò–º—è: {playerData.name}<br /></span>
            <span>–†–∞—Å–∞: {playerData.Race}<br /></span>
            <span>–ö–ª–∞—Å—Å: {playerData.Character_class}<br /></span>
            <span>–£—Ä–æ–≤–µ–Ω—å: {playerData.experience}/{playerData.experience_next_level}<br /></span>
            <span>–û—á–∫–∏ –Ω–∞–≤—ã–∫–æ–≤ –∑–∞ —É—Ä–æ–≤–µ–Ω—å: {playerData.points_per_level}<br /></span>
            <span>–°–∫–∏–¥–∫–∞: {playerData.discount}<br /><br /></span>

            {playerData.bloodlust !== 0 && (<span>–ö—Ä–æ–≤–æ–∂–∞–¥–Ω–æ—Å—Ç—å: {playerData.bloodlust}<br /></span>)}
            {playerData.rage !== 0 && (<span>–Ø—Ä–æ—Å—Ç—å: {playerData.rage}<br /></span>)}
            {playerData.regeneration !== 0 && (<span>–†–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è: {playerData.regeneration}<br /></span>)}
            {playerData.ressurect !== 0 && (<span>–í–æ—Å–∫—Ä–µ—à–µ–Ω–∏–µ: {playerData.ressurect}<br /></span>)}
            <span>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ—á–∫–∏ –ø–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏—è: {playerData.move_OP}<br /></span>
            <span>–ó–µ–ª—å—è –∑–∞ –±–æ–π: {playerData.consumable_items}<br /></span>
            <span>–ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≤–µ—Ä–æ–∫ —Å–∫—Ä—ã—Ç–Ω–æ—Å—Ç–∏: {playerData.sneak_check}<br /></span>
            <span>–û—á–∫–∏ –¥–µ–π—Å—Ç–≤–∏—èüèÉ: {playerData.action_points}<br /></span>
            <span>–ò–Ω–∏—Ü–∏–∞—Ç–∏–≤–∞‚è≥: {playerData.initiative}<br /><br /></span>

            <span><strong>–ê—Ç–∞–∫–∞</strong> üó°<br /></span>
            <span>–ê—Ç–∞–∫–∞ –≤ –±–ª–∏–∂–Ω–µ–º –±–æ—é: {playerData.melee_attack}<br /></span>
            <span>–ê—Ç–∞–∫–∞ –≤ –¥–∞–ª—å–Ω–µ–º –±–æ—é: {playerData.range_attack}<br /></span>
            <span>–£—Ä–æ–Ω –≤ –±–ª–∏–∂–Ω–µ–º –±–æ—é: {playerData.melee_damage}<br /></span>
            <span>–£—Ä–æ–Ω –≤ –¥–∞–ª—å–Ω–µ–º –±–æ—é: {playerData.range_damage}<br /></span>
            <span>–®–∞–Ω—Å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–¥–∞—Ä–∞: {playerData.crit_chance}<br /><br /></span>

            <span><strong>–§–∏–∑–∏—á–µ—Å–∫–∞—è –∞—â–∏—Ç–∞</strong> üõ°<br /></span>
            <span>–ö–ª–∞—Å—Å –∑–∞—â–∏—Ç—ã: {playerData.current_defence}<br /></span>
            <span>–°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ –∫ –∫–æ–ª—é—â–µ–º—É —É—Ä–æ–Ω—É: {playerData.piercing_deduction}<br /></span>
            <span>–°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ –∫ –¥—Ä–æ–±—è—â–µ–º—É —É—Ä–æ–Ω—É: {playerData.bludge_deduction}<br /></span>
            <span>–°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ –∫ —Ä—É–±—è—â–µ–º—É —É—Ä–æ–Ω—É: {playerData.slashing_deduction}<br /><br /></span>

            <span><strong>–ú–∞–≥–∏—á–µ—Å–∫–∞—è –∑–∞—â–∏—Ç–∞</strong> ü™Ñ<br /></span>
            <span>–ú–∞–≥–∏—á–µ—Å–∫–æ–µ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ: {playerData.magic_resist}<br /></span>
            <span>–°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ –∫ –æ–≥–Ω–µ–Ω–Ω–æ–º—É —É—Ä–æ–Ω—É: {playerData.fire_deduction}<br /></span>
            <span>–°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ –∫ –ª–µ–¥—è–Ω–æ–º—É —É—Ä–æ–Ω—É: {playerData.ice_deduction}<br /></span>
            <span>–°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ –∫ —É—Ä–æ–Ω—É –º–æ–ª–Ω–∏–µ–π: {playerData.electric_deduction}<br /></span>
            <span>–°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ –∫ —É—Ä–æ–Ω—É —Ç—å–º–æ–π: {playerData.dark_deduction}<br /></span>
            <span>–°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ –∫ —É—Ä–æ–Ω—É —Å–≤–µ—Ç–æ–º: {playerData.light_deduction}<br /></span>
            <span>–°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ –∫ —É—Ä–æ–Ω—É –∂–∏–∑–Ω—å—é: {playerData.life_deduction}<br /></span>
            <span>–°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ –∫ –∑–≤—É–∫–æ–≤–æ–º—É —É—Ä–æ–Ω—É: {playerData.sound_deduction}<br /></span>
            <span>–°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ –∫ –≤–æ–∑–¥—É—à–Ω–æ–º—É —É—Ä–æ–Ω—É: {playerData.wind_deduction}<br /></span>
            <span>–°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ –∫ —É—Ä–æ–Ω—É —Å–º–µ—Ä—Ç—å—é: {playerData.death_deduction}<br /></span>
            <span>–°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ –∫ –í–ª–∞—Å—Ç–∏: {playerData.power_deduction}<br /></span>
          </Container>
        </Tab>
        {[
          "–ê—Ç—Ä–∏–±—É—Ç—ã",
          "–ù–∞–≤—ã–∫–∏",
          "–ú–∞–≥–∏—è",
          "–¢–∞–ª–∞–Ω—Ç—ã",
          "–£–º–µ–Ω–∏—è",
          "–í—Ä–µ–º–µ–Ω–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã",
        ].map((category) => (
          <Tab key={category} eventKey={category} title={category}>
            {getSectionData(category) && (
              <Container>
                <ul>
                  {Object.entries(getSectionData(category).data).map(([key, value]) => (
                    <li key={key} className="display-linebreak">
                      <strong>{key}:</strong> {value}
                    </li>
                  ))}
                </ul>
              </Container>
            )}
          </Tab>
        ))}
      </Tabs>
    </div>
  );
});

export default Character;