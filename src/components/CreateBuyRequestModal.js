import { useState, useEffect } from "react";
import { Modal, Button, Form, Row, Col, Alert, Card } from "react-bootstrap";

const CreateBuyRequestModal = ({ show, onHide, onCreate, playerData, inventoryItems }) => {
  const [selectedItem, setSelectedItem] = useState(null);
  const [formData, setFormData] = useState({
    buy_price: "",
    buy_amount: ""
  });
  const [error, setError] = useState("");
  const [searchQuery, setSearchQuery] = useState("");
  const [loading, setLoading] = useState(false);
  const [filteredItems, setFilteredItems] = useState([]);

  const playerMoney = playerData?.money || 0;

  useEffect(() => {
    if (show) {
      setSelectedItem(null);
      setFormData({
        buy_price: "",
        buy_amount: ""
      });
      setError("");
      setSearchQuery("");
      setLoading(false);
      setFilteredItems(inventoryItems || []);
    }
  }, [show, inventoryItems]);

  useEffect(() => {
    if (searchQuery) {
      const filtered = inventoryItems.filter(item => 
        item.name && item.name.toLowerCase().includes(searchQuery.toLowerCase())
      );
      setFilteredItems(filtered);
    } else {
      setFilteredItems(inventoryItems || []);
    }
  }, [searchQuery, inventoryItems]);

  useEffect(() => {
    if (selectedItem && selectedItem.value) {
      const itemValue = selectedItem.value;
      const suggestedPrice = Math.round(itemValue * 0.7); // 70% –æ—Ç —Ü–µ–Ω–Ω–æ—Å—Ç–∏ –¥–ª—è —Å–∫—É–ø–∫–∏
      
      setFormData(prev => ({
        ...prev,
        buy_price: suggestedPrice.toString(),
        buy_amount: "1"
      }));
    }
  }, [selectedItem]);

  const handleCreate = async () => {
    if (!selectedItem) {
        setError("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è —Å–∫—É–ø–∫–∏");
        return;
    }

    const buyPrice = Number(formData.buy_price) || 0;
    const buyAmount = Number(formData.buy_amount) || 0;

    if (buyPrice <= 0 || buyAmount <= 0) {
        setError("–¶–µ–Ω–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –±–æ–ª—å—à–µ 0");
        return;
    }

    const totalCost = buyPrice * buyAmount;
    if (playerMoney < totalCost) {
        setError(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –∑–∞—è–≤–∫–∏: ${totalCost} üåï`);
        return;
    }

    setLoading(true);
    try {
        const buyRequestData = {
        item_id: selectedItem.id, // –≠—Ç–æ —á–∏—Å–ª–æ
        item_name: selectedItem.name,
        buy_price: buyPrice,
        buy_amount: buyAmount
        };

        await onCreate(buyRequestData);
    } catch (error) {
        console.error("Error in handleCreate:", error);
        setError("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ —Å–∫—É–ø–∫—É");
    } finally {
        setLoading(false);
    }
    };

  const handleInputChange = (field, value) => {
    if (value === "" || /^\d*\.?\d*$/.test(value)) {
      setFormData(prev => ({
        ...prev,
        [field]: value
      }));
    }
  };

  const getItemType = (item) => {
    const typeMap = {
      'head': '–®–ª–µ–º',
      'cloak': '–ü–ª–∞—â',
      'breast_armor': '–î–æ—Å–ø–µ—Ö',
      'arm_armor': '–ù–∞—Ä—É—á–∏',
      'gloves': '–ü–µ—Ä—á–∞—Ç–∫–∏',
      'belt': '–ü–æ—è—Å',
      'leg_armor': '–ü–æ–Ω–æ–∂–∏',
      'boots': '–û–±—É–≤—å',
      'necklace': '–ê–º—É–ª–µ—Ç',
      'ring': '–ö–æ–ª—å—Ü–æ',
      'right_hand': '–û—Ä—É–∂–∏–µ',
      'left_hand': '–õ–µ–≤–∞—è —Ä—É–∫–∞',
      'secondary_weapon': '–ó–∞–ø–∞—Å–Ω–æ–µ –æ—Ä—É–∂–∏–µ',
      'supplies': '–†–∞—Å—Ö–æ–¥–Ω–∏–∫',
      'food': '–ï–¥–∞',
      'potions': '–ó–µ–ª—å–µ',
      'scroll': '–°–≤–∏—Ç–æ–∫',
      'reagent': '–†–µ–∞–≥–µ–Ω—Ç',
      'goods': '–¢–æ–≤–∞—Ä—ã',
    };
    return typeMap[item.type] || item.type || "–†–∞–∑–Ω–æ–µ";
  };

  return (
    <Modal show={show} onHide={onHide} centered className="fantasy-modal" size="lg">
      <Modal.Header closeButton className="fantasy-card-header fantasy-card-header-primary">
        <Modal.Title>üí∞ –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —Å–∫—É–ø–∫—É</Modal.Title>
      </Modal.Header>
      <Modal.Body>
        {error && (
          <Alert variant="danger" onClose={() => setError("")} dismissible>
            {error}
          </Alert>
        )}

        <Row>
          <Col md={6}>
            <h6 className="fantasy-text-primary mb-3">–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è —Å–∫—É–ø–∫–∏:</h6>
            
            <Form.Control
              type="text"
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              placeholder="üîç –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é..."
              className="mb-3"
            />

            {filteredItems.length === 0 ? (
              <div className="text-center fantasy-text-muted py-4">
                {(inventoryItems || []).length === 0 
                  ? "–í –≤–∞—à–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ –Ω–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏"
                  : "–ü—Ä–µ–¥–º–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
                }
              </div>
            ) : (
              <div style={{ maxHeight: '400px', overflowY: 'auto' }}>
                {filteredItems.map(item => (
                  <Card
                    key={item.id}
                    className={`mb-2 fantasy-card ${
                      selectedItem?.id === item.id 
                        ? 'border-primary bg-light' 
                        : ''
                    }`}
                    style={{ cursor: 'pointer' }}
                    onClick={() => setSelectedItem(item)}
                  >
                    <Card.Body className="p-3">
                      <div className="d-flex justify-content-between align-items-start">
                        <div>
                          <h8 className="fantasy-text-primary mb-1">
                            {item.name}
                          </h8>
                          <small className="fantasy-text-muted">
                            –¢–∏–ø: {getItemType(item)}<br/>
                            –¶–µ–Ω–Ω–æ—Å—Ç—å: {item.value || 0} üåï<br/>
                            –í –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ: {item.count} —à—Ç.
                          </small>
                        </div>
                      </div>
                    </Card.Body>
                  </Card>
                ))}
              </div>
            )}
          </Col>
          
          <Col md={6}>
            <div className="fantasy-card p-3">
              <h6 className="fantasy-text-primary mb-3">–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞—è–≤–∫–∏:</h6>
              
              {selectedItem && (
                <div className="mb-3 p-2 fantasy-card bg-light">
                  <strong>–í—ã–±—Ä–∞–Ω:</strong> {selectedItem.name}<br/>
                  <small className="fantasy-text-muted">
                    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Ü–µ–Ω–∞ —Å–∫—É–ø–∫–∏ (70% –æ—Ç —Ü–µ–Ω–Ω–æ—Å—Ç–∏)
                  </small>
                </div>
              )}

              <Form>
                <Form.Group className="mb-3">
                  <Form.Label>–¶–µ–Ω–∞ —Å–∫—É–ø–∫–∏ –∑–∞ —à—Ç. (üåï)</Form.Label>
                  <Form.Control
                    type="text"
                    value={formData.buy_price}
                    onChange={(e) => handleInputChange('buy_price', e.target.value)}
                    placeholder="70"
                  />
                  <Form.Text className="text-muted">
                    –¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É –ø—Ä–µ–¥–º–µ—Ç–∞ (–∞–≤—Ç–æ: 70% –æ—Ç —Ü–µ–Ω–Ω–æ—Å—Ç–∏)
                  </Form.Text>
                </Form.Group>

                <Form.Group className="mb-3">
                  <Form.Label>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è —Å–∫—É–ø–∫–∏</Form.Label>
                  <Form.Control
                    type="text"
                    value={formData.buy_amount}
                    onChange={(e) => handleInputChange('buy_amount', e.target.value)}
                    placeholder="1"
                  />
                  <Form.Text className="text-muted">
                    –°–∫–æ–ª—å–∫–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —Ö–æ—Ç–∏—Ç–µ —Å–∫—É–ø–∏—Ç—å
                  </Form.Text>
                </Form.Group>

                <div className="fantasy-card p-2 bg-light">
                  <small className="fantasy-text-muted">
                    üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: <strong>{playerMoney} üåï</strong><br/>
                    üí∏ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: <strong>
                      {formData.buy_price && formData.buy_amount 
                        ? (Number(formData.buy_price) * Number(formData.buy_amount)) 
                        : 0} üåï
                    </strong>
                  </small>
                </div>
              </Form>
            </div>
          </Col>
        </Row>
      </Modal.Body>
      <Modal.Footer>
        <Button 
          className="fantasy-btn fantasy-btn-secondary" 
          onClick={onHide}
          disabled={loading}
        >
          –û—Ç–º–µ–Ω–∞
        </Button>
        <Button 
          className="fantasy-btn fantasy-btn-success"
          onClick={handleCreate}
          disabled={!selectedItem || loading || !formData.buy_price || !formData.buy_amount}
        >
          {loading ? "–°–æ–∑–¥–∞–Ω–∏–µ..." : "üí∞ –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —Å–∫—É–ø–∫—É"}
        </Button>
      </Modal.Footer>
    </Modal>
  );
};

export default CreateBuyRequestModal;